{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "identity": {
            "type": "string",
            "defaultValue": "/subscriptions/e4272367-5645-4c4e-9c67-3b74b59a6982/resourceGroups/Contoso/providers/Microsoft.ManagedIdentity/userAssignedIdentities/alex-test-identity"
        },
        "timestamp": {
            "type": "string",
            "defaultValue": "[utcNow()]"
        }
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "name": "createCert",
            "apiVersion": "2019-10-01-preview",
            "location": "[resourceGroup().location]",
            "kind": "AzurePowerShell",
            "identity": {
                "type": "userAssigned",
                "userAssignedIdentities": {
                    "[parameters('identity')]": {}
                }
            },
            "properties": {
                "azPowerShellVersion": "2.7",
                "scriptContent": "
                    param(
                        [string] [Parameter(Mandatory=$false)] $vaultName,
                        [string] [Parameter(Mandatory=$false)] $certificateName,
                        [string] [Parameter(Mandatory=$false)] $subjectName
                    )

                    # Get-AzContext

                    $ErrorActionPreference = 'Stop'
                    $DeploymentScriptOutputs = @{}

                    $existingCert = Get-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName

                    if ($existingCert -and $existingCert.Certificate.Subject -eq $subjectName) {

                        Write-Host \"Certificate $certificateName in vault $vaultName is already present, updating issuance policy\"

                        $DeploymentScriptOutputs['certThumbprint'] = $existingCert.Thumbprint
                        $existingCert | Out-String
                    }
                    else {

                        $policy = New-AzKeyVaultCertificatePolicy -SubjectName $subjectName -IssuerName Self -ValidityInMonths 12 -Verbose

                        # private key is added as a secret that can be retrieved in the ARM template
                        Add-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName -CertificatePolicy $policy -Verbose

                        $newCert = Get-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName

                        # it takes a few seconds for KeyVault to finish
                        $tries = 0 
                        do {
                            Write-Host 'Waiting for certificate creation completion...'
                            Start-Sleep -Seconds 10
                            $operation = Get-AzKeyVaultCertificateOperation -VaultName $vaultName -Name $certificateName
                            $tries++

                            if ($operation.Status -eq 'failed')
                            {
                                throw \"Creating certificate $certificateName in vault $vaultName failed with error $($operation.ErrorMessage)\"
                            }

                            if ($tries -gt 120)
                            {
                                throw \"Timed out waiting for creation of certificate $certificateName in vault $vaultName\"
                            }

                        } while ($operation.Status -ne 'completed')

                        $DeploymentScriptOutputs['certThumbprint'] = $newCert.Thumbprint
                        $newCert | Out-String
                    }
                ",
                "Arguments": "-vaultName alex-test-kv -certificateName test-cert -subjectName 'CN=contoso.com'",
                "timeout": "PT30M",
                "retentionInterval": "P1D",
                "cleanupPreference": "OnSuccess",
                "forceUpdateTag": "[parameters('timestamp')]"
            }
        }
    ],
    "outputs": {
        "result": {
            "value": "[reference('createCert').outputs.certThumbprint]",
            "type": "string"
        }
    }
}